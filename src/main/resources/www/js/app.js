var app = angular.module('PrettyPR', ['ngMaterial']);

app.controller('AppCtrl', ['$scope', '$mdSidenav', '$http', function ($scope, $mdSidenav, $http) {
    $scope.pr = {};
    $scope.prettyPR = {"pullrequest":{"changes":[{"patch":"@@ -5,17 +5,38 @@\n \n import org.junit.Test;\n \n+import spoon.Launcher;\n+import spoon.reflect.declaration.CtClass;\n import spoon.reflect.declaration.CtEnum;\n+import spoon.reflect.visitor.filter.FieldAccessFilter;\n+import spoon.test.annotation.AnnotationTest;\n+import spoon.test.enums.testclasses.Foo;\n \n public class EnumsTest {\n \n-\t@Test \n+\t@Test\n \tpublic void testModelBuildingEnum() throws Exception {\n-\t\tCtEnum<Regular> enumeration = build (\"spoon.test.enums\",  \"Regular\");\n+\t\tCtEnum<Regular> enumeration = build(\"spoon.test.enums\", \"Regular\");\n \t\tassertEquals(\"Regular\", enumeration.getSimpleName());\n \t\tassertEquals(3, Regular.values().length);\n \t\tassertEquals(3, enumeration.getValues().size());\n \t\tassertEquals(\"A\", enumeration.getValues().get(0).getSimpleName());\n \t\tassertEquals(5, enumeration.getFields().size());\n \t}\n+\n+\t@Test\n+\tpublic void testAnnotationsOnEnum() throws Exception {\n+\t\tfinal Launcher launcher = new Launcher();\n+\t\tlauncher.run(new String[] {\n+\t\t\t\t\"-i\", \"./src/test/java/spoon/test/enums/testclasses\",\n+\t\t\t\t\"-o\", \"./target/spooned\"\n+\t\t});\n+\n+\t\tfinal CtEnum<?> foo = (CtEnum) launcher.getFactory().Type().get(Foo.class);\n+\t\tassertEquals(1, foo.getFields().size());\n+\t\tassertEquals(1, foo.getFields().get(0).getAnnotations().size());\n+\t\tassertEquals(Deprecated.class, AnnotationTest.getActualClassFromAnnotation(\n+\t\t\t\tfoo.getFields().get(0).getAnnotations().get(0)));\n+\t\tassertEquals(\"public enum Foo {\\n@java.lang.Deprecated\\n    Bar;}\", foo.toString());\n+\t}\n }","location":{"path":"src/test/java/spoon/test/enums/EnumsTest.java","type":"Class","class":"spoon.test.enums.EnumsTest"},"changedMethods":[[{"patch":"-\n-import org.junit.Test;\n-\n-import spoon.reflect.declaration.CtEnum;\n-\n-public class EnumsTest {\n-\n-\t@Test \n-\tpublic void testModelBuildingEnum() throws Exception {\n-\t\tCtEnum<Regular> enumeration = build (\"spoon.test.enums\",  \"Regular\");\n-\t\tassertEquals(\"Regular\", enumeration.getSimpleName());\n-\t\tassertEquals(3, Regular.values().length);\n-\t\tassertEquals(3, enumeration.getValues().size());\n-\t\tassertEquals(\"A\", enumeration.getValues().get(0).getSimpleName());\n-\t\tassertEquals(5, enumeration.getFields().size());\n-\t}\n-}\n+\n+import org.junit.Test;\n+\n+import spoon.Launcher;\n+import spoon.reflect.declaration.CtClass;\n+import spoon.reflect.declaration.CtEnum;\n+import spoon.reflect.visitor.filter.FieldAccessFilter;\n+import spoon.test.annotation.AnnotationTest;\n+import spoon.test.enums.testclasses.Foo;\n+\n+public class EnumsTest {\n+\n+\t@Test\n+\tpublic void testModelBuildingEnum() throws Exception {\n+\t\tCtEnum<Regular> enumeration = build(\"spoon.test.enums\", \"Regular\");\n+\t\tassertEquals(\"Regular\", enumeration.getSimpleName());\n+\t\tassertEquals(3, Regular.values().length);\n+\t\tassertEquals(3, enumeration.getValues().size());\n+\t\tassertEquals(\"A\", enumeration.getValues().get(0).getSimpleName());\n+\t\tassertEquals(5, enumeration.getFields().size());\n+\t}\n+\n+\t@Test\n+\tpublic void testAnnotationsOnEnum() throws Exception {\n+\t\tfinal Launcher launcher = new Launcher();\n+\t\tlauncher.run(new String[] {\n+\t\t\t\t\"-i\", \"./src/test/java/spoon/test/enums/testclasses\",\n+\t\t\t\t\"-o\", \"./target/spooned\"\n+\t\t});\n+\n+\t\tfinal CtEnum<?> foo = (CtEnum) launcher.getFactory().Type().get(Foo.class);\n+\t\tassertEquals(1, foo.getFields().size());\n+\t\tassertEquals(1, foo.getFields().get(0).getAnnotations().size());\n+\t\tassertEquals(Deprecated.class, AnnotationTest.getActualClassFromAnnotation(\n+\t\t\t\tfoo.getFields().get(0).getAnnotations().get(0)));\n+\t\tassertEquals(\"public enum Foo {\\n@java.lang.Deprecated\\n    Bar;}\", foo.toString());\n+\t}\n+}","method":"testAnnotationsOnEnum"},{"patch":"-\n-import org.junit.Test;\n-\n-import spoon.reflect.declaration.CtEnum;\n-\n-public class EnumsTest {\n-\n-\t@Test \n-\tpublic void testModelBuildingEnum() throws Exception {\n-\t\tCtEnum<Regular> enumeration = build (\"spoon.test.enums\",  \"Regular\");\n-\t\tassertEquals(\"Regular\", enumeration.getSimpleName());\n-\t\tassertEquals(3, Regular.values().length);\n-\t\tassertEquals(3, enumeration.getValues().size());\n-\t\tassertEquals(\"A\", enumeration.getValues().get(0).getSimpleName());\n-\t\tassertEquals(5, enumeration.getFields().size());\n-\t}\n-}\n+\n+import org.junit.Test;\n+\n+import spoon.Launcher;\n+import spoon.reflect.declaration.CtClass;\n+import spoon.reflect.declaration.CtEnum;\n+import spoon.reflect.visitor.filter.FieldAccessFilter;\n+import spoon.test.annotation.AnnotationTest;\n+import spoon.test.enums.testclasses.Foo;\n+\n+public class EnumsTest {\n+\n+\t@Test\n+\tpublic void testModelBuildingEnum() throws Exception {\n+\t\tCtEnum<Regular> enumeration = build(\"spoon.test.enums\", \"Regular\");\n+\t\tassertEquals(\"Regular\", enumeration.getSimpleName());\n+\t\tassertEquals(3, Regular.values().length);\n+\t\tassertEquals(3, enumeration.getValues().size());\n+\t\tassertEquals(\"A\", enumeration.getValues().get(0).getSimpleName());\n+\t\tassertEquals(5, enumeration.getFields().size());\n+\t}\n+\n+\t@Test\n+\tpublic void testAnnotationsOnEnum() throws Exception {\n+\t\tfinal Launcher launcher = new Launcher();\n+\t\tlauncher.run(new String[] {\n+\t\t\t\t\"-i\", \"./src/test/java/spoon/test/enums/testclasses\",\n+\t\t\t\t\"-o\", \"./target/spooned\"\n+\t\t});\n+\n+\t\tfinal CtEnum<?> foo = (CtEnum) launcher.getFactory().Type().get(Foo.class);\n+\t\tassertEquals(1, foo.getFields().size());\n+\t\tassertEquals(1, foo.getFields().get(0).getAnnotations().size());\n+\t\tassertEquals(Deprecated.class, AnnotationTest.getActualClassFromAnnotation(\n+\t\t\t\tfoo.getFields().get(0).getAnnotations().get(0)));\n+\t\tassertEquals(\"public enum Foo {\\n@java.lang.Deprecated\\n    Bar;}\", foo.toString());\n+\t}\n+}","method":"testModelBuildingEnum"}]],"$$hashKey":"object:9"},{"patch":"@@ -913,6 +913,7 @@ public void visitCtDo(CtDo doLoop) {\n \t}\n \n \tprivate void writeEnumField(CtField<?> f) {\n+\t\tvisitCtNamedElement(f);\n \t\twrite(f.getSimpleName());\n \t\tif (f.getDefaultExpression() != null) {\n \t\t\tCtConstructorCall<?> constructorCall = (CtConstructorCall<?>) f.getDefaultExpression();\n@@ -2111,8 +2112,10 @@ public DefaultJavaPrettyPrinter writeHeader(List<CtType<?>> types,\n \t\t\tscan(pack).writeln().writeln().writeTabs();\n \t\t\tif (env.isAutoImports()) {\n \t\t\t\tfor (CtTypeReference<?> ref : imports) {\n-\t\t\t\t\twrite(\"import \" + ref.getQualifiedName() + \";\")\n+\t\t\t\t\tif (!ref.getQualifiedName().contains(\"$\")) {\n+\t\t\t\t\t\twrite(\"import \" + ref.getQualifiedName() + \";\")\n \t\t\t\t\t\t\t.writeln().writeTabs();\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \t\t\twriteln().writeTabs();","location":{"path":"src/main/java/spoon/reflect/visitor/DefaultJavaPrettyPrinter.java","type":"Class","class":"spoon.reflect.visitor.DefaultJavaPrettyPrinter"},"changedMethods":[[{"patch":"-\t}\n-\n-\tprivate void writeEnumField(CtField<?> f) {\n-\t\twrite(f.getSimpleName());\n-\t\tif (f.getDefaultExpression() != null) {\n-\t\t\tCtConstructorCall<?> constructorCall = (CtConstructorCall<?>) f.getDefaultExpression();\n+\t}\n+\n+\tprivate void writeEnumField(CtField<?> f) {\n+\t\tvisitCtNamedElement(f);\n+\t\twrite(f.getSimpleName());\n+\t\tif (f.getDefaultExpression() != null) {\n+\t\t\tCtConstructorCall<?> constructorCall = (CtConstructorCall<?>) f.getDefaultExpression();","method":"writeEnumField"},{"patch":"-\t\t\tscan(pack).writeln().writeln().writeTabs();\n-\t\t\tif (env.isAutoImports()) {\n-\t\t\t\tfor (CtTypeReference<?> ref : imports) {\n-\t\t\t\t\twrite(\"import \" + ref.getQualifiedName() + \";\")\n-\t\t\t\t\t\t\t.writeln().writeTabs();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\twriteln().writeTabs();\n+\t\t\tscan(pack).writeln().writeln().writeTabs();\n+\t\t\tif (env.isAutoImports()) {\n+\t\t\t\tfor (CtTypeReference<?> ref : imports) {\n+\t\t\t\t\tif (!ref.getQualifiedName().contains(\"$\")) {\n+\t\t\t\t\t\twrite(\"import \" + ref.getQualifiedName() + \";\")\n+\t\t\t\t\t\t\t.writeln().writeTabs();\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\twriteln().writeTabs();","method":"writeHeader"}]],"$$hashKey":"object:10"},{"patch":"@@ -704,7 +704,7 @@ public void testGetAnnotationOuter() throws Exception {\n \t\tassertEquals(2,annot.value().length);\n \t}\n \n-\tprivate Class<? extends Annotation> getActualClassFromAnnotation(CtAnnotation<? extends Annotation> annotation) {\n+\tpublic static Class<? extends Annotation> getActualClassFromAnnotation(CtAnnotation<? extends Annotation> annotation) {\n \t\treturn annotation.getAnnotationType().getActualClass();\n \t}\n ","location":{"path":"src/test/java/spoon/test/annotation/AnnotationTest.java","type":"Class","class":"spoon.test.annotation.AnnotationTest"},"changedMethods":[[{"patch":"-\t\tassertEquals(2,annot.value().length);\n-\t}\n-\n-\tprivate Class<? extends Annotation> getActualClassFromAnnotation(CtAnnotation<? extends Annotation> annotation) {\n-\t\treturn annotation.getAnnotationType().getActualClass();\n-\t}\n-\n+\t\tassertEquals(2,annot.value().length);\n+\t}\n+\n+\tpublic static Class<? extends Annotation> getActualClassFromAnnotation(CtAnnotation<? extends Annotation> annotation) {\n+\t\treturn annotation.getAnnotationType().getActualClass();\n+\t}\n+","method":"getActualClassFromAnnotation"}]],"$$hashKey":"object:11"},{"patch":"@@ -0,0 +1,6 @@\n+package spoon.test.enums.testclasses;\n+\n+public enum Foo {\n+\t@Deprecated\n+\tBar;\n+}","location":{"path":"src/test/java/spoon/test/enums/testclasses/Foo.java","type":"Enum","class":"spoon.test.enums.testclasses.Foo"},"changedMethods":[[]],"$$hashKey":"object:12"}],"id":302,"title":"No innerclass import","body":"When \"with-imports\" option is turned on, the generated output code will add:\r\n\r\nimport pkg.Klass$InnerKlass\r\n\r\nwith code defined as\r\n```java\r\npackage pkg\r\npublic class Klass {\r\npublic class InnerKlass {}\r\n}\r\n```\r\n\r\nThis pull requests prevents those imports from being generated (as in my case, I have the import of the Klass class). However, I believe that it should be replaced by pkg.Klass.InnerKlass, although I am not sure how this works with non-static inner classes.","url":"/repos/INRIA/spoon/pulls/302"},"repository":"spoon","user":"INRIA"};
    for(var i in $scope.prettyPR.pullrequest.changes) {
        $scope.prettyPR.pullrequest.changes[i].patch = $scope.prettyPR.pullrequest.changes[i].patch.replace(/	/g, "   ");
    }
    $scope.onProgress = false;
    $scope.toggleSidenav = function (menuId) {
        $mdSidenav(menuId).toggle();
    };
    $scope.submit = function () {
        $scope.onProgress = true;
        $scope.prettyPR = null;
        $scope.error = null;
        $http.get("/api/v.0/" + $scope.pr.user + "/" + $scope.pr.repo + "/" + $scope.pr.id).then(function (data) {
            $scope.prettyPR = data.data;
            for(var i in $scope.prettyPR.pullrequest.changes) {
                $scope.prettyPR.pullrequest.changes[i].patch = $scope.prettyPR.pullrequest.changes[i].patch.replace(/	/g, "   ");
            }
            console.log($scope.prettyPR);
            $scope.onProgress = false;
        }, function (error) {
            $scope.error = error.data;
            $scope.onProgress = false;
        });
    }

}]).directive("markdown", function ($compile, $http) {
    var converter = new showdown.Converter();
    return {
        restrict: 'E',
        replace: true,
        link: function (scope, element, attrs) {
            if ("src" in attrs) {
                $http.get(attrs.src).then(function(data) {
                    element.html(converter.makeHtml(data.data));
                });
            } else if ("text" in attrs) {
                element.html(converter.makeHtml(attrs.text));
            } else {
                element.html(converter.makeHtml(element.text()));
            }
        }
    };
}).config(function ($mdThemingProvider) {

    // Configure a dark theme with primary foreground yellow

    $mdThemingProvider.theme('docs-dark', 'default')
        .dark();

});
